import streamlit as st
from streamlit_autorefresh import st_autorefresh
import httpx
import pandas as pd
import logging

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω (600000 –º—Å)
st.set_page_config(page_title="Football Team Analytics", page_icon="‚öΩ", layout="wide")
st.title("‚öΩ Football Team Analytics")

st_autorefresh(interval=600000, key="keep_alive")

# üîê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á —ñ–∑ secrets
headers = {"X-Auth-Token": st.secrets["football_api_key"]}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª —Ç–∞ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger("main")

# –°–ª–æ–≤–Ω–∏–∫ –∑ —Ç–æ–ø-5 –ª—ñ–≥–∞–º–∏
LEAGUES = {
    "Premier League": "PL",
    "La Liga": "PD",
    "Bundesliga": "BL1",
    "Serie A": "SA",
    "Ligue 1": "FL1",
}


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑ –ª—ñ–≥–∏
@st.cache_data
def fetch_teams(competition_code):
    logger.info(f"–ó–∞–ø–∏—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª—ñ–≥–∏: {competition_code}")
    url = f"https://api.football-data.org/v4/competitions/{competition_code}/teams"
    response = httpx.get(url, headers=headers)
    if response.status_code == 200:
        teams = response.json().get("teams", [])
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(teams)} –∫–æ–º–∞–Ω–¥")
        return {
            team["name"]: {"id": team["id"], "league": competition_code}
            for team in teams
        }
    else:
        logger.error(f"Error fetching teams: {response.status_code}")
        return {}


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –º–∞—Ç—á—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
def fetch_team_last_matches(team_id, limit=10):
    logger.info(f"–ó–∞–ø–∏—Ç –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {limit} –º–∞—Ç—á—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ {team_id}")
    url = f"https://api.football-data.org/v4/teams/{team_id}/matches?status=FINISHED&limit={limit}"
    response = httpx.get(url, headers=headers)
    if response.status_code == 200:
        logger.info(
            f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(response.json().get('matches', []))} –º–∞—Ç—á—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ {team_id}"
        )
        return response.json().get("matches", [])
    else:
        logger.error(
            f"Error fetching matches for team {team_id}: {response.status_code}"
        )
        return []


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á—ñ–≤
def calculate_team_stats(matches, team_id):
    wins = 0
    draws = 0
    losses = 0
    goals_scored = 0
    goals_conceded = 0

    for match in matches:
        is_home = match["homeTeam"]["id"] == team_id
        home_goals = match["score"]["fullTime"]["home"]
        away_goals = match["score"]["fullTime"]["away"]

        if is_home:
            goals_scored += home_goals
            goals_conceded += away_goals
        else:
            goals_scored += away_goals
            goals_conceded += home_goals

        if match["score"]["winner"] == "DRAW":
            draws += 1
        elif (is_home and match["score"]["winner"] == "HOME_TEAM") or (
            not is_home and match["score"]["winner"] == "AWAY_TEAM"
        ):
            wins += 1
        else:
            losses += 1

    return {
        "wins": wins,
        "draws": draws,
        "losses": losses,
        "goals_scored": goals_scored,
        "goals_conceded": goals_conceded,
        "total_matches": len(matches),
    }


# –í–∏–±—ñ—Ä –ª—ñ–≥–∏ —Ç–∞ –∫–æ–º–∞–Ω–¥–∏
league = st.selectbox("–í–∏–±–µ—Ä–∏ –ª—ñ–≥—É", list(LEAGUES.keys()))
teams_dict = fetch_teams(LEAGUES[league])
team_name = st.selectbox(
    "–í–∏–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É",
    list(teams_dict.keys()),
    index=list(teams_dict.keys()).index("Real Madrid")
    if "Real Madrid" in teams_dict
    else 0,
)

if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–∏"):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è {team_name}")
    team_id = teams_dict.get(team_name, {}).get("id")

    if team_id:
        st.header(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥–∏: {team_name} ({league})")
        st.markdown("---")

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç—á—ñ
        matches = fetch_team_last_matches(team_id)

        if matches:
            # –°–æ—Ä—Ç—É—î–º–æ –º–∞—Ç—á—ñ –≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ
            matches = sorted(matches, key=lambda m: m["utcDate"], reverse=True)

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = calculate_team_stats(matches, team_id)

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ü–µ—Ä–µ–º–æ–≥–∏", stats["wins"])
            with col2:
                st.metric("–ù—ñ—á–∏—ó", stats["draws"])
            with col3:
                st.metric("–ü–æ—Ä–∞–∑–∫–∏", stats["losses"])
            with col4:
                st.metric("–í—Å—å–æ–≥–æ –º–∞—Ç—á—ñ–≤", stats["total_matches"])

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª—ñ–≤
            st.subheader("ü•Ö –ì–æ–ª–∏")
            goals_df = pd.DataFrame(
                {
                    "–ü–æ–∫–∞–∑–Ω–∏–∫": ["–ó–∞–±–∏—Ç–æ", "–ü—Ä–æ–ø—É—â–µ–Ω–æ"],
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": [stats["goals_scored"], stats["goals_conceded"]],
                }
            )
            st.bar_chart(goals_df.set_index("–ü–æ–∫–∞–∑–Ω–∏–∫"))

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –º–∞—Ç—á—ñ–≤
            st.subheader("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ –º–∞—Ç—á—ñ")
            matches_data = [
                {
                    "‚Ññ": idx + 1,
                    "–î–∞—Ç–∞": m["utcDate"][:10],
                    "–¢—É—Ä–Ω—ñ—Ä": m["competition"]["name"],
                    "–ì–æ—Å–ø–æ–¥–∞—Ä—ñ": m["homeTeam"]["name"],
                    "–ì–æ—Å—Ç—ñ": m["awayTeam"]["name"],
                    "–†–∞—Ö—É–Ω–æ–∫": f"{m['score']['fullTime']['home']}-{m['score']['fullTime']['away']}",
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "–ù—ñ—á–∏—è"
                    if m["score"]["winner"] == "DRAW"
                    else "–ü–µ—Ä–µ–º–æ–≥–∞"
                    if (
                        m["homeTeam"]["id"] == team_id
                        and m["score"]["winner"] == "HOME_TEAM"
                    )
                    or (
                        m["awayTeam"]["id"] == team_id
                        and m["score"]["winner"] == "AWAY_TEAM"
                    )
                    else "–ü–æ—Ä–∞–∑–∫–∞",
                }
                for idx, m in enumerate(matches)
            ]
            matches_df = pd.DataFrame(
                matches_data,
                columns=[
                    "‚Ññ",
                    "–î–∞—Ç–∞",
                    "–¢—É—Ä–Ω—ñ—Ä",
                    "–ì–æ—Å–ø–æ–¥–∞—Ä—ñ",
                    "–ì–æ—Å—Ç—ñ",
                    "–†–∞—Ö—É–Ω–æ–∫",
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç",
                ],
            )
            st.dataframe(matches_df)

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
            csv = matches_df.to_csv(index=False, sep=",", encoding="utf-8-sig").encode(
                "utf-8-sig"
            )
            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (CSV)",
                data=csv,
                file_name=f"{team_name}_matches.csv",
                mime="text/csv",
            )

        else:
            st.info("–ú–∞—Ç—á—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        st.markdown("---")
    else:
        st.error("–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        logger.error(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –¥–ª—è {team_name}")
